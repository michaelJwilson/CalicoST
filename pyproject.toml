[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "calicost"
version = "1.0.0"
authors = [
  "Cong Ma <congma@princeton.edu>",
  "Metin Balaban <metin@princeton.edu>",
  "Jingxian Liu <jingxian.liu@wustl.edu>",
  "Siqi Chen <siqichen@wustl.edu>",
  "Li Ding <lding@wustl.edu>",
  "Ben Raphael <braphael@cs.princeton.edu>",
]
description = "Inferring allele-specific copy number aberrations and tumor phylogeography from spatially resolved transcriptomics"
readme = "README.md"
license = "BSD-3-Clause"
homepage = "https://github.com/raphael-group/CalicoST"
repository = "https://github.com/raphael-group/CalicoST"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
]
packages = [
    { include = "calicost", from = "python"},
]

[tool.poetry.scripts]
calicost = "calicost.cli.calicost:main"
parse_input = "calicost.cli.parse_input:main"
merge_bamfile = "calicost.cli.merge_bamfile:main"
filter_snps_forphasing = "calicost.cli.filter_snps_forphasing:main"
get_snp_matrix = "calicost.cli.get_snp_matrix:main"

[tool.poetry.dependencies]
python = "3.10"
numpy = "1.24.4"
scipy = "1.11.3"
pandas = "2.1.1"
scikit-learn = "1.3.2"
scanpy = "1.9.6"
anndata = "0.10.3"
tqdm = "4.66.1"
statsmodels = "0.14.0"
matplotlib = "3.7.3"
networkx = "3.2.1"
numba="0.57.1"
pysam="0.22.0"
seaborn="*"
ca-certificates="*"
certifi="*"
openssl="*"
python-igraph="*"
leidenalg="*"
snakemake="*"
ipykernel="*"
conda-forge::lemon="*"
ete3="*"

[tool.poetry.group.test.dependencies]
pytest = "^6.0.0"
ruff = "^0.3.3"
pre-commit = "^3.6.2"
line-profiler = "^4.1.2"
pytest-benchmark = "^4.0.0"
pytest-xdist = "^3.5.0"
memory-profiler = "^0.61.0"
black = {extras = ["jupyter"], version = "^24.3.0"}

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra -q", "--strict-markers", "--strict-config"]
# addopts += ["--showlocals"]
xfail_strict = true
# filterwarnings = ["error"]
testpaths = [
    "tests",
]
markers = [
    "e2e: marks and end-to-end test that requires dedicated data (deselect with -m 'not e2e')",
    "benchmark: marks a benchmarking test (deselect with -m 'not benchmark')"
]

[tool.ruff.lint]
# a list of warnings and errors that flake8 should enable
extend-select = [
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "ICN",         # flake8-import-conventions
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"